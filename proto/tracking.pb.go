// Code generated by protoc-gen-go.
// source: tracking.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	tracking.proto

It has these top-level messages:
	SysMigrationsStatus
	SysTrackingStatus
	SysWorkspaceIndex
	TrackingTimesheet
	TrackingEntry
	TrackingEntryRef
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// SysMigrationsStatus represents the current state of backend migrations.
type SysMigrationsStatus struct {
	// The versions that have been applied.
	Versions []uint64 `protobuf:"varint,1,rep,packed,name=versions" json:"versions,omitempty"`
}

func (m *SysMigrationsStatus) Reset()                    { *m = SysMigrationsStatus{} }
func (m *SysMigrationsStatus) String() string            { return proto1.CompactTextString(m) }
func (*SysMigrationsStatus) ProtoMessage()               {}
func (*SysMigrationsStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SysMigrationsStatus) GetVersions() []uint64 {
	if m != nil {
		return m.Versions
	}
	return nil
}

// SysTrackingStatus represents the current state of tracking, i.e. whether or not a timer is
// running, or which timer we last modified.
type SysTrackingStatus struct {
	// Whether or not a (any) timer is running.
	IsRunning bool `protobuf:"varint,1,opt,name=is_running,json=isRunning" json:"is_running,omitempty"`
	// The date of the timesheet currently being tracked.
	Timesheet string `protobuf:"bytes,2,opt,name=timesheet" json:"timesheet,omitempty"`
	// The hash of the entry currently being tracked.
	Entry string `protobuf:"bytes,3,opt,name=entry" json:"entry,omitempty"`
	// The name of the workspace currently being tracked.
	Workspace string `protobuf:"bytes,4,opt,name=workspace" json:"workspace,omitempty"`
}

func (m *SysTrackingStatus) Reset()                    { *m = SysTrackingStatus{} }
func (m *SysTrackingStatus) String() string            { return proto1.CompactTextString(m) }
func (*SysTrackingStatus) ProtoMessage()               {}
func (*SysTrackingStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SysTrackingStatus) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *SysTrackingStatus) GetTimesheet() string {
	if m != nil {
		return m.Timesheet
	}
	return ""
}

func (m *SysTrackingStatus) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *SysTrackingStatus) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

// SysWorkspaceIndex keeps track of all created workspaces.
type SysWorkspaceIndex struct {
	Workspaces []string `protobuf:"bytes,1,rep,name=workspaces" json:"workspaces,omitempty"`
}

func (m *SysWorkspaceIndex) Reset()                    { *m = SysWorkspaceIndex{} }
func (m *SysWorkspaceIndex) String() string            { return proto1.CompactTextString(m) }
func (*SysWorkspaceIndex) ProtoMessage()               {}
func (*SysWorkspaceIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SysWorkspaceIndex) GetWorkspaces() []string {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

// TrackingTimesheet represents a timesheet. It contains all of the entries for a time period.
type TrackingTimesheet struct {
	// The key of this timesheet.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// A timesheet consists of many entries. A timesheet can be totally empty, it's just there to
	// hold the reference to a bunch of entries under a date, i.e. for easy access.
	Entries []string `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *TrackingTimesheet) Reset()                    { *m = TrackingTimesheet{} }
func (m *TrackingTimesheet) String() string            { return proto1.CompactTextString(m) }
func (*TrackingTimesheet) ProtoMessage()               {}
func (*TrackingTimesheet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TrackingTimesheet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TrackingTimesheet) GetEntries() []string {
	if m != nil {
		return m.Entries
	}
	return nil
}

// TrackingEntry represents an entry in the timesheet. This will have enough information to commit
// to the duration, and also enough information to identify the entry.
type TrackingEntry struct {
	// The key of this entry.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The key of the timesheet this entry belongs to.
	Timesheet string `protobuf:"bytes,2,opt,name=timesheet" json:"timesheet,omitempty"`
	// The note associated with this entry.
	Note string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
	// The unix timestamp of when this entry was created.
	Created uint64 `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	// The unix timestamp of when this entry was last updated.
	Updated uint64 `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	// The number of seconds this has been tracked for (once committed).
	Duration uint64 `protobuf:"varint,6,opt,name=duration" json:"duration,omitempty"`
}

func (m *TrackingEntry) Reset()                    { *m = TrackingEntry{} }
func (m *TrackingEntry) String() string            { return proto1.CompactTextString(m) }
func (*TrackingEntry) ProtoMessage()               {}
func (*TrackingEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TrackingEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TrackingEntry) GetTimesheet() string {
	if m != nil {
		return m.Timesheet
	}
	return ""
}

func (m *TrackingEntry) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *TrackingEntry) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *TrackingEntry) GetUpdated() uint64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *TrackingEntry) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// TrackingEntryRef represents a reference from an entry's short key to it's full key.
type TrackingEntryRef struct {
	// The key of this entry reference.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The key of the entry this reference belongs to.
	Entry string `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *TrackingEntryRef) Reset()                    { *m = TrackingEntryRef{} }
func (m *TrackingEntryRef) String() string            { return proto1.CompactTextString(m) }
func (*TrackingEntryRef) ProtoMessage()               {}
func (*TrackingEntryRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TrackingEntryRef) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TrackingEntryRef) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func init() {
	proto1.RegisterType((*SysMigrationsStatus)(nil), "proto.SysMigrationsStatus")
	proto1.RegisterType((*SysTrackingStatus)(nil), "proto.SysTrackingStatus")
	proto1.RegisterType((*SysWorkspaceIndex)(nil), "proto.SysWorkspaceIndex")
	proto1.RegisterType((*TrackingTimesheet)(nil), "proto.TrackingTimesheet")
	proto1.RegisterType((*TrackingEntry)(nil), "proto.TrackingEntry")
	proto1.RegisterType((*TrackingEntryRef)(nil), "proto.TrackingEntryRef")
}

func init() { proto1.RegisterFile("tracking.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xe5, 0x36, 0xed, 0xbf, 0x39, 0xe9, 0x8f, 0x5a, 0xc3, 0x60, 0x21, 0x40, 0x95, 0xa7,
	0x4e, 0x48, 0xa8, 0x1b, 0x0b, 0x13, 0x03, 0x03, 0x8b, 0x53, 0x89, 0x11, 0x85, 0xe4, 0x08, 0x56,
	0x84, 0x13, 0xd9, 0x0e, 0x90, 0x9d, 0x6f, 0xc2, 0x17, 0x45, 0xb6, 0x13, 0x53, 0x04, 0x62, 0x8a,
	0xdf, 0x7b, 0xb9, 0xf3, 0xef, 0x6c, 0xc3, 0x81, 0xd5, 0x79, 0x51, 0x4b, 0x55, 0x9d, 0xb7, 0xba,
	0xb1, 0x0d, 0x9d, 0xf9, 0x0f, 0xbf, 0x80, 0xc3, 0xac, 0x37, 0xb7, 0xb2, 0xd2, 0xb9, 0x95, 0x8d,
	0x32, 0x99, 0xcd, 0x6d, 0x67, 0xe8, 0x31, 0x2c, 0x5e, 0x50, 0x1b, 0xe7, 0x30, 0xb2, 0x9e, 0x6e,
	0x12, 0x11, 0x35, 0x7f, 0x27, 0xb0, 0xca, 0x7a, 0xb3, 0x1b, 0xfa, 0x0d, 0x15, 0xa7, 0x00, 0xd2,
	0xdc, 0xeb, 0x4e, 0x29, 0xa9, 0x2a, 0x46, 0xd6, 0x64, 0xb3, 0x10, 0xa9, 0x34, 0x22, 0x18, 0xf4,
	0x04, 0x52, 0x2b, 0x9f, 0xd1, 0x3c, 0x21, 0x5a, 0x36, 0x59, 0x93, 0x4d, 0x2a, 0xbe, 0x0c, 0x7a,
	0x04, 0x33, 0x54, 0x56, 0xf7, 0x6c, 0xea, 0x93, 0x20, 0x5c, 0xcd, 0x6b, 0xa3, 0x6b, 0xd3, 0xe6,
	0x05, 0xb2, 0x24, 0xd4, 0x44, 0x83, 0x6f, 0x3d, 0xc5, 0xdd, 0xa8, 0x6f, 0x54, 0x89, 0x6f, 0xf4,
	0x0c, 0x20, 0xfe, 0x11, 0xc8, 0x53, 0xb1, 0xe7, 0xf0, 0x2b, 0x58, 0x8d, 0xdc, 0xbb, 0xb8, 0xfb,
	0x12, 0xa6, 0x35, 0xf6, 0x9e, 0x39, 0x15, 0x6e, 0x49, 0x19, 0xfc, 0x73, 0x08, 0x12, 0x0d, 0x9b,
	0xf8, 0x1e, 0xa3, 0xe4, 0x1f, 0x04, 0xfe, 0x8f, 0x1d, 0xae, 0x3d, 0xe5, 0xcf, 0xea, 0xbf, 0x67,
	0xa5, 0x90, 0xa8, 0xc6, 0xe2, 0x30, 0xaa, 0x5f, 0xbb, 0xfd, 0x0a, 0x8d, 0xb9, 0xc5, 0xd2, 0xcf,
	0x99, 0x88, 0x51, 0xba, 0xa4, 0x6b, 0x4b, 0x9f, 0xcc, 0x42, 0x32, 0x48, 0x77, 0x45, 0x65, 0x17,
	0x6e, 0x8d, 0xcd, 0x7d, 0x14, 0x35, 0xbf, 0x84, 0xe5, 0x37, 0x48, 0x81, 0x8f, 0xbf, 0x70, 0xc6,
	0x53, 0x9f, 0xec, 0x9d, 0xfa, 0xc3, 0xdc, 0x3f, 0x8c, 0xed, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x94, 0x67, 0x78, 0x31, 0x02, 0x00, 0x00,
}
